{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported type 'OpCode' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/gateway.go",
      "language": "go",
      "line": 32,
      "offset": 6,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 8,
        "surroundingCode": "}\n\ntype OpCode int\n\n//goland:noinspection GoUnusedConst"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "68f85e13b740a200dd22482051f0dca770d741b06b43e5595ec51b5052a5991c"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported type 'Service' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/user.go",
      "language": "go",
      "line": 102,
      "offset": 6,
      "length": 7,
      "code": {
        "startLine": 100,
        "length": 7,
        "offset": 8,
        "surroundingCode": "}\n\ntype Service string\n\n//goland:noinspection SpellCheckingInspection,GoUnusedConst"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "e5d08ba66f3fe54cac2f73458c474c424c0483332f5f7f0614eb0a02adeaa87e"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported type 'LocalizationDict' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/reference.go",
      "language": "go",
      "line": 136,
      "offset": 6,
      "length": 16,
      "code": {
        "startLine": 134,
        "length": 16,
        "offset": 8,
        "surroundingCode": "}\n\ntype LocalizationDict struct {\n\tDanish              string `json:\"da,omitempty\"`\n\tGerman              string `json:\"de,omitempty\"`"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "0a96f4b1f239228667e5cba5645f89d53dce0b0fb97b1e42777faa4efcbae2da"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported type 'AutoModerationRule' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/auto_moderation.go",
      "language": "go",
      "line": 18,
      "offset": 6,
      "length": 18,
      "code": {
        "startLine": 16,
        "length": 18,
        "offset": 18,
        "surroundingCode": "package api\n\ntype AutoModerationRule struct {\n\tID              Snowflake       `json:\"id\"`               // the id of this rule\n\tGuildID         Snowflake       `json:\"guild_id\"`         // the id of the guild which this rule belongs to"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "0eb9d6af33f987b71d614cc39e2fd3f4739038c92d57988d4f2f5c36561c1291"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported type 'KeyWordPresetType' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/auto_moderation.go",
      "language": "go",
      "line": 52,
      "offset": 6,
      "length": 17,
      "code": {
        "startLine": 50,
        "length": 17,
        "offset": 8,
        "surroundingCode": "}\n\ntype KeyWordPresetType int\n\n//goland:noinspection GoUnusedConst"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "7a1ced17bbec4022a15e554bb2d4db8e0838f5aab0866846f8efd41f7f641b0e"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported type 'AutoModerationActionType' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/auto_moderation.go",
      "language": "go",
      "line": 75,
      "offset": 6,
      "length": 24,
      "code": {
        "startLine": 73,
        "length": 24,
        "offset": 8,
        "surroundingCode": "}\n\ntype AutoModerationActionType int\n\n//goland:noinspection GoUnusedConst"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "eae2a4a85519028685c69b8f00245703f06beb8795538dc69dd05bc266347338"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetType' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 29,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 27,
        "length": 7,
        "offset": 23,
        "surroundingCode": "}\n\nfunc (c *Component) SetType(t ComponentType) *Component {\n\tc.Type = t\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "c4027d025693ee27b6a05c1c58bd0f224ba0e0b8d7ce3e3e115fb9299c60f9b0"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetCustomID' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 41,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 39,
        "length": 11,
        "offset": 23,
        "surroundingCode": "}\n\nfunc (c *Component) SetCustomID(t string) *Component {\n\tc.CustomID = t\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "a1288b2ae142b17e5a27a644c297ce3652b5bdd795f1b6ded82680f3890be77c"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'IsDisabled' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 47,
      "offset": 21,
      "length": 10,
      "code": {
        "startLine": 45,
        "length": 10,
        "offset": 23,
        "surroundingCode": "}\n\nfunc (c *Component) IsDisabled() bool {\n\treturn c.Disabled\n}"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "ed2df4268721c022173f56392a52d4117f31762fed3608b2e0245a813546eb49"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetDisabled' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 51,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 49,
        "length": 11,
        "offset": 23,
        "surroundingCode": "}\n\nfunc (c *Component) SetDisabled(d bool) *Component {\n\tc.Disabled = d\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "a953194b70692ab2f983271b558027e5fa1d403780b72f5f0a7f581da47bf0b6"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetButtonStyle' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 63,
      "offset": 21,
      "length": 14,
      "code": {
        "startLine": 61,
        "length": 14,
        "offset": 23,
        "surroundingCode": "}\n\nfunc (c *Component) SetButtonStyle(s ButtonStyle) *Component {\n\tc.Style = s\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "f8aea3eebfd764a90427a14baadbf3c38684cc06b3ac74db4d82d687629c8800"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetTextInputStyle' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 75,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 73,
        "length": 17,
        "offset": 23,
        "surroundingCode": "}\n\nfunc (c *Component) SetTextInputStyle(s TextInputStyle) *Component {\n\tc.Style = s\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "a397d2d6aaa229f811459178be83ffe299f53c01677c218e3dffcab92766c4f3"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetEmoji' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 87,
      "offset": 21,
      "length": 8,
      "code": {
        "startLine": 85,
        "length": 8,
        "offset": 23,
        "surroundingCode": "}\n\nfunc (c *Component) SetEmoji(e *Emoji) *Component {\n\tc.Emoji = e\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "35cf1de6fbcc89cb3367e60ed87ca7db3b85f8fba4d35730e144de9e54937315"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetURL' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 99,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 97,
        "length": 6,
        "offset": 23,
        "surroundingCode": "}\n\nfunc (c *Component) SetURL(u string) *Component {\n\tc.URL = u\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "4ab820a1db1d76c1b2cbecbfb16c70ab130fe3a3edb8313f0b38c097722611d3"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetCustomID' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 115,
      "offset": 36,
      "length": 11,
      "code": {
        "startLine": 113,
        "length": 11,
        "offset": 38,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseModal) SetCustomID(c string) *InteractionResponseModal {\n\ti.Data.CustomID = c\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "7b9467c6c5cad4f35db07f5caba710bada12440e243afb5bf6229719a8a2b34a"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetTitle' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 121,
      "offset": 36,
      "length": 8,
      "code": {
        "startLine": 119,
        "length": 8,
        "offset": 38,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseModal) SetTitle(t string) *InteractionResponseModal {\n\ti.Data.Title = t\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "b4417a1d1959892b687f3bb72a5e9e0b4859134deffc3d75414ac3712c8b699a"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'AddComponent' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 127,
      "offset": 36,
      "length": 12,
      "code": {
        "startLine": 125,
        "length": 12,
        "offset": 38,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseModal) AddComponent(c *Component) *InteractionResponseModal {\n\ti.Data.Components = append(i.Data.Components, *c)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "60aaad4d7c7a54722b1135523119dcee878f14a7541700b2330e3277e5ae9077"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetType' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 142,
      "offset": 39,
      "length": 7,
      "code": {
        "startLine": 140,
        "length": 7,
        "offset": 41,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseMessages) SetType(t InteractionCallbackType) *InteractionResponseMessages {\n\ti.Type = t\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "f326c17558887f75dbb174f056bf407a74323205f1ec255aac63a60eb916d176"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetTts' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 148,
      "offset": 39,
      "length": 6,
      "code": {
        "startLine": 146,
        "length": 6,
        "offset": 41,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseMessages) SetTts(tts bool) *InteractionResponseMessages {\n\ti.Data.TTS = tts\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "db01061872d7d7a659dbbb0d44a6a210c085043029569bcab240f7e511ed51ba"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetContent' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 154,
      "offset": 39,
      "length": 10,
      "code": {
        "startLine": 152,
        "length": 10,
        "offset": 41,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseMessages) SetContent(content string) *InteractionResponseMessages {\n\ti.Data.Content = content\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "ef7de38e1830e68a34250c3962a1f9fd4f7b3267a578d4328530b8c658c9c38c"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'AddEmbed' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 160,
      "offset": 39,
      "length": 8,
      "code": {
        "startLine": 158,
        "length": 8,
        "offset": 41,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseMessages) AddEmbed(e *Embed) *InteractionResponseMessages {\n\ti.Data.Embeds = append(i.Data.Embeds, *e)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "1757b29f629e2b3101e13f7ed12d7c761c69e1347c05fd62ef234dc4436c05af"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'AddEmbeds' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 166,
      "offset": 39,
      "length": 9,
      "code": {
        "startLine": 164,
        "length": 9,
        "offset": 41,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseMessages) AddEmbeds(e []Embed) *InteractionResponseMessages {\n\ti.Data.Embeds = append(i.Data.Embeds, e...)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "2002c0ba21e921c7ae0d316790e92cd94ee4e9ed07f5c5ede3a983f0e3f8e634"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'SetEphemeral' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 172,
      "offset": 39,
      "length": 12,
      "code": {
        "startLine": 170,
        "length": 12,
        "offset": 41,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseMessages) SetEphemeral() *InteractionResponseMessages {\n\ti.Data.Flags = i.Data.Flags | Ephemeral\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "b7f4e5c6b4ae4a4357099fba0286ec965463af30987407d866bdddc05915a335"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'AddFlag' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 178,
      "offset": 39,
      "length": 7,
      "code": {
        "startLine": 176,
        "length": 7,
        "offset": 41,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseMessages) AddFlag(f MessageFlags) *InteractionResponseMessages {\n\tif f == SuppressEmbeds || f == Ephemeral {\n\t\ti.Data.Flags = i.Data.Flags | f"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "8c885f8c0613bf56d32c4e5e237b5086cbf590d7680fe1f222fad49d223a281a"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'AddComponent' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 188,
      "offset": 39,
      "length": 12,
      "code": {
        "startLine": 186,
        "length": 12,
        "offset": 41,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseMessages) AddComponent(c *Component) *InteractionResponseMessages {\n\ti.Data.Components = append(i.Data.Components, *c)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "62cce814ed378e554a5b4419e860b65205874303eb7ebc636955a347e34d1dee"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'AddAttachment' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 194,
      "offset": 39,
      "length": 13,
      "code": {
        "startLine": 192,
        "length": 13,
        "offset": 41,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseMessages) AddAttachment(a *Attachment) *InteractionResponseMessages {\n\ti.Data.Attachments = append(i.Data.Attachments, *a)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "96a38c7ccf358c318ef633fbe604f9d17b55230f91eb922ed2476a2035eb508b"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'AddChoice' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 222,
      "offset": 43,
      "length": 9,
      "code": {
        "startLine": 220,
        "length": 9,
        "offset": 45,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseAutocomplete) AddChoice(c *ApplicationCommandOptionChoice) *InteractionResponseAutocomplete {\n\ti.Data.Choices = append(i.Data.Choices, c)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "f97fd9b3d3b4bbaf2fcd9afc3df76c6ddc0d0d3b0158b5a5fb7d3cd9bce760a9"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported method 'AddChoices' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components_api.go",
      "language": "go",
      "line": 228,
      "offset": 43,
      "length": 10,
      "code": {
        "startLine": 226,
        "length": 10,
        "offset": 45,
        "surroundingCode": "}\n\nfunc (i *InteractionResponseAutocomplete) AddChoices(c []*ApplicationCommandOptionChoice) *InteractionResponseAutocomplete {\n\ti.Data.Choices = append(i.Data.Choices, c...)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "a175f1c96d615d6be725deaba79bf1b1976acac3a70c393e6195c7af4e692e72"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported type 'ChannelFlag' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/channel.go",
      "language": "go",
      "line": 105,
      "offset": 6,
      "length": 11,
      "code": {
        "startLine": 103,
        "length": 11,
        "offset": 8,
        "surroundingCode": ")\n\ntype ChannelFlag int\n\n//goland:noinspection GoUnusedConst"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "2de60675a68d5a38b41904a12ebdfe7a47f616fe9fa75eb0b0f13f67ec729a9b"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported type 'SortOrderType' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/channel.go",
      "language": "go",
      "line": 113,
      "offset": 6,
      "length": 13,
      "code": {
        "startLine": 111,
        "length": 13,
        "offset": 8,
        "surroundingCode": ")\n\ntype SortOrderType int\n\n//goland:noinspection GoUnusedConst"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "bf0f5afceb3d6efc51634d73bb902534ebe50d2d4a5d37bdbe182b5792177852"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported function 'Contains' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "utilities/utils.go",
      "language": "go",
      "line": 18,
      "offset": 6,
      "length": 8,
      "code": {
        "startLine": 16,
        "length": 8,
        "offset": 24,
        "surroundingCode": "package utilities\n\nfunc Contains[T comparable](slice []T, e T) bool {\n\tfor _, v := range slice {\n\t\tif v == e {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "e906febfc77b08f13f03d53de2369f1e861adf452ed8cc33b181d5d5dd4fc05c"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported constant 'ComponentTypeActionRow' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components.go",
      "language": "go",
      "line": 44,
      "offset": 2,
      "length": 22,
      "code": {
        "startLine": 42,
        "length": 22,
        "offset": 10,
        "surroundingCode": "\nconst (\n\tComponentTypeActionRow  ComponentType = iota + 1 // A container for other components\n\tComponentTypeButton                              // A clickable button\n\tComponentTypeSelectMenu                          // A select menu for picking from choices"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "6e44e63ecb75e9670ee82ad7672e0674adecd0e274f6c14c6dbaf0d12019d839"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported constant 'ComponentTypeButton' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components.go",
      "language": "go",
      "line": 45,
      "offset": 2,
      "length": 19,
      "code": {
        "startLine": 43,
        "length": 19,
        "offset": 95,
        "surroundingCode": "const (\n\tComponentTypeActionRow  ComponentType = iota + 1 // A container for other components\n\tComponentTypeButton                              // A clickable button\n\tComponentTypeSelectMenu                          // A select menu for picking from choices\n\tComponentTypeTextInput                           // A text input object"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "cac3e97b96ffd448c51f9411e1c4f44e1eb6351f119b2d91bb064ac21aab6484"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported constant 'ComponentTypeSelectMenu' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components.go",
      "language": "go",
      "line": 46,
      "offset": 2,
      "length": 23,
      "code": {
        "startLine": 44,
        "length": 23,
        "offset": 159,
        "surroundingCode": "\tComponentTypeActionRow  ComponentType = iota + 1 // A container for other components\n\tComponentTypeButton                              // A clickable button\n\tComponentTypeSelectMenu                          // A select menu for picking from choices\n\tComponentTypeTextInput                           // A text input object\n)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "604e110e89e50804767b1ef9a3488e5309bf9c5fbf07809a3815604050f085be"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported constant 'ComponentTypeTextInput' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components.go",
      "language": "go",
      "line": 47,
      "offset": 2,
      "length": 22,
      "code": {
        "startLine": 45,
        "length": 22,
        "offset": 165,
        "surroundingCode": "\tComponentTypeButton                              // A clickable button\n\tComponentTypeSelectMenu                          // A select menu for picking from choices\n\tComponentTypeTextInput                           // A text input object\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "b1fdd85ec5fe8054a388e6859b684e24665740ff9ec39c013ec74f99c927c559"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported constant 'TextInputShort' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components.go",
      "language": "go",
      "line": 127,
      "offset": 2,
      "length": 14,
      "code": {
        "startLine": 125,
        "length": 14,
        "offset": 10,
        "surroundingCode": "\nconst (\n\tTextInputShort     TextInputStyle = iota + 1 // A single-line input\n\tTextInputParagraph                           // A multi-line input\n)"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "308b96dfe499ef18745d162ddc3280a57f8e8f59df67a41b76020d2863e1e281"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "Exported element should have a comment",
  "severity": "Moderate",
  "comment": "Exported constant 'TextInputParagraph' should have a comment or be unexported",
  "detailsInfo": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix.",
  "sources": [
    {
      "type": "file",
      "path": "api/message_components.go",
      "language": "go",
      "line": 128,
      "offset": 2,
      "length": 18,
      "code": {
        "startLine": 126,
        "length": 18,
        "offset": 78,
        "surroundingCode": "const (\n\tTextInputShort     TextInputStyle = iota + 1 // A single-line input\n\tTextInputParagraph                           // A multi-line input\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoExportedElementShouldHaveComment"
  },
  "hash": "eaadc830e704868ff0e543dca3b7e397107f2fb6023e4b33ed3e0fffcba5c7d4"
},{
  "tool": "Code Inspection",
  "category": "Declaration redundancy",
  "type": "Unused function",
  "severity": "High",
  "comment": "Unused function 'firePutRequest'",
  "detailsInfo": "Reports unused unexported functions.\n\nIn Go, a function is unexported if it begins with a small letter. Names of unexported functions that were defined but never used are\ngrayed out.\n\n    // Unused unexported function\n    func unExportedUnusedFunc()  {\n\n    }\n\n    func main() {\n     fmt.Println(\"Hello\")\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "api/rest.go",
      "language": "go",
      "line": 216,
      "offset": 6,
      "length": 14,
      "code": {
        "startLine": 214,
        "length": 14,
        "offset": 8,
        "surroundingCode": "}\n\nfunc firePutRequest(u *url.URL, data interface{}, reason *string) []byte {\n\tresp, err := Rest.Request(http.MethodPut, u.String(), data, reason)\n\tif err != nil {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "GoUnusedFunction"
  },
  "hash": "22001185055e43fb2098e75fa9daa0064a8b869482be9a0c2d0bac4888d1c169"
}]}